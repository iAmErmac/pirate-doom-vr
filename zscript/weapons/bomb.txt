
class PDVR_Bomb : DoomWeaponZ
{
	private bool ignited;
	private bool fireKeyIgnite;

	Default
	{
	Tag "$TAG_BOMB";
	Weapon.SelectionOrder 8888;
	Weapon.AmmoUse1 1;
	Weapon.AmmoUse2 1;
	Weapon.AmmoGive 6;
	weapon.Slotnumber 7;
	Weapon.AmmoType "PBombammo";
	Weapon.AmmoType2 "PBombammo";
	Obituary "%o was exploded by %k's bomb.";
	Inventory.Pickupmessage "$GOTBOMB";
	+WEAPON.MELEEWEAPON
	+WEAPON.NOALERT
	+WEAPON.NOAUTOAIM
	+WEAPON.EXPLOSIVE
	}
	
	override void Tick()
	{
		Super.Tick();
		
		if(!owner || owner.health < 1) return;
		
		if(owner.player.readyweapon != self)
		{
			if(owner.countinv("PDVR_OffhandCutlass"))
			{
				PDVR_OffhandCutlass(owner.findinventory("PDVR_OffhandCutlass")).needPipe = false;
			}
			return;
		}
		
		if(bombIgniteMode == 1) fireKeyIgnite = true;
		if(!owner.countinv("PDVR_OffhandCutlass")) fireKeyIgnite = true;
		
		//this code will try to force holding smoking pipe on the off-hand if you didnt disable offhand cutlass/pipe
		//FYI PDVR_OffhandCutlass actually acts as both offhand cutlass and smoking pipe
		if(!fireKeyIgnite)
		{
			if(!(owner.player.offhandweapon is "PDVR_OffhandCutlass"))
			{
				owner.player.PendingWeapon = Weapon(owner.findinventory("PDVR_OffhandCutlass"));
			}
			PDVR_OffhandCutlass(owner.findinventory("PDVR_OffhandCutlass")).needPipe = true;
			
			checkPipeIgnite();
		}
	}
	
	void checkPipeIgnite()
	{
		let pmo = owner.player.mo;
		int hand = bOffhandWeapon;
		double angle = pmo.angle;
		double pitch = pmo.AimTarget() ? pmo.BulletSlope(null, ALF_PORTALRESTRICT) : pmo.pitch;
		int laflags = LAF_NOIMPACTDECAL | LAF_NOINTERACT | LAF_NORANDOMPUFFZ;
		if(hand) laflags |= LAF_ISOFFHAND;
		let _puff = pmo.LineAttack(angle+110, 3, pitch+30, 0, "melee", "PDVR_DUmmyPuff1", laflags);
		vector3 fusePos = _puff.pos;
		vector3 pipePos = hand ? owner.AttackPos : owner.OffhandPos;
		
		if(Level.vec3diff(fusePos, pipePos).length() < 1.5 && !ignited)
		{
			ignited = true;
		}
	}
	
	States
	{
	Spawn:
		PBMB A -1;
		Loop;
	Ready:
		TNT1 A 0;
		BOMB A 0 A_SetWeaponModel("BMNH");
		#### A 0 A_JumpIf(invoker.ignited, "ReadyIgnited");
		#### A 1 A_WeaponReady;
		Loop;
	ReadyIgnited:
		#### # 0 A_StartSound("fuse/fuse", CHAN_WEAPON);
		#### AAAA 4
		{
			A_GunFlash();
			A_WeaponReady();
		}
		Loop;
	Deselect:
		BOMB A 0 A_SetWeaponModel("BMNH");
		#### A 1 A_Lower (160);
		Loop;
	Select:
		BOMB A 0 A_SetWeaponModel("BMNH");
		#### A 1 A_Raise (160);
		Loop;
	Fire:
		BOMB A 0 A_SetWeaponModel("BMNH");
		#### # 0 A_JumpIf(invoker.ignited == false, "Ignite");
		#### # 0 A_StartSound("espada/swing", CHAN_WEAPON);
		#### B 1 A_FireProjectile("Bomb",fRandom(-1,1),1,0,0,500);
		#### # 0 { invoker.ignited = false; }
		#### # 0 A_JumpIfInventory("PowerStrength",1,"Fastfinish");
		#### B 34;
		Goto Ready;
	Fastfinish:
		#### B 24;
		Goto Ready;
	AltFire:
		BOMB A 0 A_SetWeaponModel("BMNH");
		#### # 0 A_JumpIf(invoker.ignited == false, "Ignite");
		#### # 0 A_StartSound("espada/swing", CHAN_WEAPON);
		#### B 1 A_FireProjectile("Bomb2",fRandom(-1,1),1,0,0,500);
		#### # 0 { invoker.ignited = false; }
		#### # 0 A_JumpIfInventory("PowerStrength",1,"Fastfinish");
		#### B 34;
		Goto Ready;
	Ignite:
		#### # 0 A_JumpIf(invoker.fireKeyIgnite == false, "Ready");
		#### # 0 { invoker.ignited = true; }
		#### # 0 A_StartSound("fuse/fuse", CHAN_WEAPON);
		#### AAAA 4 A_Gunflash;
		Goto ReadyIgnited;
	Flash:
		SPRK AB 2 Bright;
		Stop;
	Placeholder:
		BMNH A 0;
		Stop;
	}
}

//explosive bomb projectile
class Bomb : Actor
{
	Default
	{
		speed 20;
		radius 8;
		mass 3000;
		health 40;
		BounceType "Classic";
		wallbouncefactor 0.001;
		BounceCount 0;
		Obituary "%o exploded.";
		scale 0.5;
		+NOBLOCKMONST
		+NOBLOCKMAP
		-ALLOWBOUNCEONACTORS	
		-BOUNCEONWALLS
	}
	
	States
	{
	Spawn:
		BMB1 A 0 A_StartSound("fuse/fuse");
		BMB1 A 1;
		BMB1 A 0 A_ChangeFlag("BLOCKEDBYSOLIDACTORS",1);
		BMB1 BABA 1 A_StartSound("fuse/fuse");
		BMB1 BABABABAB 1;
		BMB1 ABABAB 2 A_spawnitemex ("PDSparks2", 0, -14, 0, frandom (-1, 1), frandom (-1, -3), frandom (0, 2));
		BMB1 A 1 A_Spawnitemex("PDExplosao",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
		BMB1 A 1 A_Spawnitemex("PDExplosaomissile",0,0,-46,0,0,0,0, SXF_TRANSFERPOINTERS);
		BMB1 A 0 A_Alertmonsters;
		Stop;

	}
}

//explosive bomb projectile for alt attack (faster travel speed)
class Bomb2 : Bomb
{
	Default
	{
		speed 35;
	}
}

//explosion animation for the bomb
class PDExplosion : Actor
{
	Default
	{
	Obituary "%o exploded.";
	renderstyle "Add";
	alpha 0.6;
	+noblockmap
	+THRUACTORS
	+NOINTERACTION
	+CANPASS
	+NOCLIP
	+SOLID
	-PUSHABLE
	mass 10000000000;
	}
	
	states
	{
	spawn:
		TSMK A 0 A_explode(random (150,300),100,0);
		TSMK A 3 bright A_explode(random (150,300),100,0);
		TSMK B 3 bright A_Spawnitemex("PDExplosao",0,0,40,0,0,0,0,0,0);
		TSMK CDEFGHIJ 3 Bright;
		stop;
	}
}

//dynamic light for explosion
class PDExplosao : Actor
{
	Default
	{
	+NOCLIP
	+NOGRAVITY
	}

	states
	{
	Spawn:
		TNT1 A 8 Light("explosao");
		stop;
	}
}

//smoke spawner for explosion
class PDExplosaomissile : Actor
{
	Default
	{
	Obituary "%o exploded.";
	damage 1000;
	+noblockmap
	+THRUACTORS
	+NOINTERACTION
	+NOGRAVITY
	+FLOAT
	+CANPASS
	+NOCLIP
	+FORCERADIUSDMG
	}
	
	states
	{
	spawn:
		TNT1 B 1;
		TNT1 B 1 A_StartSound("weapons/rocklx",CHAN_AUTO);
		TNT1 B 1;
		TNT1 B 2 A_StartSound("cannon/shot",CHAN_WEAPON);
		TNT1 C 0 A_explode(random (100, 300),250,0,0,0);
		TNT1 B 6 A_Spawnitemex("PDExplosion",0,0,54,0,0,0,0,0,0);
		TNT1 C 0 A_quake(3,6,50,800,0);
		TNT1 C 2;
		TNT1 C 0 A_Spawnitemex("PDSmoke4",0,0,54,0,0,1,0,0,0);
		stop;
	}
}