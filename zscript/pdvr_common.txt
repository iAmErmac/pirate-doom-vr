
class PDVerChecker : Thinker
{
	static bool isPD2()
	{
		string PD2PlayerClass = "Doomguybrush";
		class<Actor> cls = PD2PlayerClass;
		
		if(!cls)
			return false;
		else
			return true;
	}
}

class PDPuff : BulletPuff
{
	default
	{
	renderstyle "Translucent";
	alpha 0.7;
	scale 0.6;
	vspeed 0;
	decal "Bullet";
	+NOBLOCKMAP
	+NOGRAVITY
	+ALLOWPARTICLES
	+NOEXTREMEDEATH
	+NOINTERACTION
	}
	
	states
	{
	Spawn:
		TNT1 AA 0 A_SpawnItemEx("PDSparks",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),0,0);
		HPUF A 2 BRIGHT A_JumpIf(pos.z <= floorz+4,"FloorHit");
		HPUF A 2 BRIGHT A_SpawnItem("PDPuff2");
		HPUF B 4 BRIGHT;
	Melee:
		HPUF C 4;
		stop;
	FloorHit:
		HGRN A 0;
		HGRN ABC 2 BRIGHT A_StartSound("puff/ric");
		HGRN DE 2 BRIGHT A_spawnitemex("PDSmoke1",0,0,0,0,0,1);
		Stop;
	}
}

class PDPuff2 : Actor
{
	Default
	{
	renderstyle "Translucent";
	alpha 0.7;
	PROJECTILE;
	Mass 1;
	+NOCLIP
	}
	
	States
	{
	Spawn:
		PUFF E 2;
		PUFF E 2 A_StartSound("puff/ric");
		PUFF FG 4 A_spawnitemex("PDSmoke1",0,0,0,0,0,1);
		Stop;
	}
}

class SwordPuff : Actor
{
	default
	{
	seesound "espada/hitflesh";
	+NOBLOCKMAP
	+NOGRAVITY
	-PUFFONACTORS
	-ALLOWPARTICLES
	+BLOODSPLATTER
	//decal nodecal
	}
	
	states
	{
	spawn:
		SWOR AAAAAAAA 0 A_SpawnItemEx("PDSparks",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),0,SXF_NOCHECKPOSITION);
		stop;
	}
}

class SwordPuff2 : SwordPuff
{
	Default
	{
	+PUFFONACTORS
	attacksound "espada/hitwall";
	seesound "espada/hitflesh";
	}
	
	states
	{
	spawn:
		TNT1 A 0;
		stop;
	}
}

class PDVR_DUmmyPuff1 : Actor
{
	Default
	{
	Radius 1;
	Height 1;
	Speed 0;
	Damage 0;
	+NOINTERACTION;
	+NOGRAVITY;
	}
	
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(developer == 1, "showDot");
		TNT1 A 2;
		Stop;
	ShowDot:
		TNT1 A 2 A_SpawnParticle("FF 00 00", SPF_FULLBRIGHT, 1, 5);
		Stop;
	}
}

class PDSparks : Actor
{
	default
	{
	Projectile;
	Damage 0;
	Gravity .125;
	Speed 0;
	Radius 1;
	Height 1;
	Scale 0.6;
	+RIPPER
	+BLOODLESSIMPACT
	-NOGRAVITY
	//+DONTSPLASH
	}
	
	States
	{
	Spawn:
		WRBL ABAB 2 Bright;
		TNT1 A 0 A_Jump(128,1);
		Loop;
		WRBL CDCD 2 Bright;
		WRBL C 1 Bright A_FadeOut;
		Wait;
	Death:
		TNT1 A 1;
		Stop;
	}
}

class PDSparks2 : PDSparks
{
	default
	{
	GRAVITY .125;
	-SOLID
	+NOBLOCKMAP
	+THRUACTORS
	}
}

//routines to show alerts for missing keybinds with the MudMessage helper
class PDVR_TipsHelper : EventHandler
{
	Array<string> missingKeys;
	int messageDelay;
	bool messagetDone;
	bool alertDone;
	bool hasMissingBinds;
	
	override void WorldTick()
	{
		if(level.mapname == "TITLEMAP") return;
		
		if(alertDone) return;
		
		bool showAlert = CVar.GetCvar("pdvr_show_tips").GetBool();
		
		if(!showAlert || Level.Time < 280) return;
		
		//show queued missing keybind alert messages
		if(missingKeys.size() && !messageDelay)
		{
			let keyName = missingKeys[0];
			PDVR_HudMessage.Create(String.Format(Stringtable.Localize("$PDVRALERTMISSINGBIND"), keyName),
					fontname: "smallfont",
					fontColor: Font.CR_Orange,
					alignment: PDVR_HudMessage.ALIGN_CENTER,
					fadeInTime: 4,
					typetime: 1,
					holdTime: 70,
					fadeOutTime: 8
			);
			missingKeys.delete(0);
			messageDelay = 190;
		}
		
		if(hasMissingBinds && missingKeys.size() == 0 && !messageDelay)
		{
			alertDone = true;
			PDVR_HudMessage.Create(Stringtable.Localize("$PDVRALERTDONEMESSAGE"),
					fontname: "smallfont",
					fontColor: Font.CR_White,
					alignment: PDVR_HudMessage.ALIGN_CENTER,
					fadeInTime: 4,
					typetime: 1,
					holdTime: 100,
					fadeOutTime: 8
			);
		}
		
		if(messageDelay) messageDelay--;
	}
	
	override void PlayerEntered (PlayerEvent e)
	{
		if(level.mapname == "TITLEMAP") return;
		
		bool showAlert = CVar.GetCvar("pdvr_show_tips").GetBool();
		
		//clear previously queued messages if exist
		let handler = PDVR_HudMessageHandler(StaticEventHandler.Find("PDVR_HudMessageHandler"));
		for (int i = 0; i < handler.hudmessages.Size(); i++)
		{
			let othermsg = handler.hudmessages[i];
			if (othermsg) othermsg.destroy();
		}
		
		if(showAlert)
		{
			if(missingKeys.size()) missingKeys.clear();
			Array<int> binds;
			
			Bindings.GetAllKeysForCommand(binds, "+oh_attack");
			if (!binds.Size())
			{
				missingKeys.push("Offhand Attack");
				hasMissingBinds = true;
			}
			
			Bindings.GetAllKeysForCommand(binds, "+oh_altatk");
			if (!binds.Size())
			{
				missingKeys.push("Offhand Alt-Attack");
				hasMissingBinds = true;
			}
		}
	}
}